heatmap(y[,s_star==3],Colv = NA, Rowv = NA)
heatmap(y[,point_SJ==1],Colv = NA, Rowv = NA)
heatmap(y[,point_SJ==2],Colv = NA, Rowv = NA)
heatmap(y[,point_SJ==3],Colv = NA, Rowv = NA)
charOTU <- function(s1,s2){
idx   <- sort(abs(rowMeans(y[,s_star==s1])-rowMeans(y[,s_star==s2])),
decreasing=TRUE, index.return=T)$ix
names <- c(rownames(y)[idx==1], rownames(y)[idx==2], rownames(y)[idx==3])
return(names)
}
charOTU(1,2)
charOTU <- function(s1,s2){
idx   <- sort(abs(rowMeans(y[,point_SJ==s1])-rowMeans(y[,point_SJ==s2])),
decreasing=TRUE, index.return=T)$ix
names <- c(rownames(y)[idx==1], rownames(y)[idx==2], rownames(y)[idx==3])
return(names)
}
charOTU(1,2)
charOTU(1,3)
Z=log(y[order(mki[3,]),s_star==3])
Zmelt <- reshape2::melt(Z)
glimpse(Zmelt)
ggplot(Zmelt,aes(Var2,Var1,fill=value)) +
geom_raster() +
scale_fill_viridis_c()
Zmelts <- rbind(
reshape2::melt(log(y[od1,s_star==1])) %>%
mutate(s_star = "1"),
reshape2::melt(log(y[od2,s_star==2])) %>%
mutate(s_star = "2"),
reshape2::melt(log(y[od3,s_star==3])) %>%
mutate(s_star = "3")
)
ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~s_star)+
scale_fill_viridis_c()
Zmelts <- rbind(
reshape2::melt(log(y[od1,s_star==1])) %>%
mutate(s_star = "1"),
reshape2::melt(log(y[od2,s_star==2])) %>%
mutate(s_star = "2"),
reshape2::melt(log(y[od3,s_star==3])) %>%
mutate(s_star = "3")
)
heatmap(y[Point_Mki1,point_SJ==1],Colv = NA, Rowv = NA)
Point_Mki1 = salso::salso(Mki[1,,-(1:90)], nRuns = 100,
maxZealousAttempts = 100, loss=VI())
Point_Mki2 = salso::salso(Mki[2,,-(1:90)], nRuns = 100,
maxZealousAttempts = 100, loss=VI())
Point_Mki1 = salso::salso(mki[1,,-(1:90)], nRuns = 100,
maxZealousAttempts = 100, loss=VI())
Point_Mki2 = salso::salso(mki[2,,-(1:90)], nRuns = 100,
maxZealousAttempts = 100, loss=VI())
Point_Mki3 = salso::salso(mki[3,,-(1:90)], nRuns = 100,
maxZealousAttempts = 100, loss=VI())
heatmap(y[Point_Mki1,point_SJ==1],Colv = NA, Rowv = NA)
heatmap(y[Point_Mki2,point_SJ==2],Colv = NA, Rowv = NA)
heatmap(y[Point_Mki3,point_SJ==3],Colv = NA, Rowv = NA)
Point_Mki1
y[order(Point_Mki1),point_SJ==1]
y
str(y)
order(Point_Mki1)
od1=unlist(sapply(1:8,function (i) which(Point_Mki1==i)))
od2=unlist(sapply(1:8,function (i) which(Point_Mki2==i)))
od3=unlist(sapply(1:8,function (i) which(Point_Mki3==i)))
heatmap(y[order(Point_Mki1),point_SJ==1],Colv = NA, Rowv = NA)
point_SJ==1
dim(y)
dim(order(Point_Mki1))
length(order(Point_Mki1))
dim(mki[1,,-(1:90)])
dim(mki)
dim(y)
B
mki   <- read.myfile("mki.txt", K, K*B)
mki
dim(mki)
read.myfile("mki.txt")
mki = read.myfile("mki.txt")
dim(mki)
mki   <- read.myfile("mki.txt", K, B)
dim(mki)
(niter2-niter1)/10
(niter-niter1)/10
(1e4-2e3)/10
(1e4)/10
mki   <- read.myfile("mki.txt", K)
dim( read.myfile("mki.txt",K))
fig5(point_SJ, niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
fig5(point_SJ, niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
fig5(point_SJ, niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
fig5(ls(1,2,3),
niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
fig5(list(1,2,3),
niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
ggsave(plot=PHeat, file="Image/prova1.pdf",
width=5, height=4.5)
ggsave(plot=PHeat, file="Image/prova2.pdf",
width=5, height=4.5)
ggsave(plot=PHeat, file="Image/prova3.pdf",
width=5, height=4.5)
ggsave(file="Image/prova3.pdf",
width=5, height=4.5)
ggsave(file="Image/prova3.pdf",
width=5, height=4.5)
fig4(list(1,2,3),
niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
fig4(
niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
)
# TBD mki to be corrected
mki_all <- read.myfile("mki.txt",K)
summ = read.myfile("iter.txt")
it = summ[,1]
col = brewer.pal(9, name="YlOrRd")
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
# TBD mki to be corrected
niter  = 1e4 #iteration MCMC
niter0 = 1e3 # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3 # just for plot
mki_all <- read.myfile("mki.txt",K)
summ = read.myfile("iter.txt")
it = summ[,1]
col = brewer.pal(9, name="YlOrRd")
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,M))
for(m in 1:M)
for(b in 1:B)
mki[,b,m] = mki2[m, (b-1)*K+(1:K)]
M
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,M))
for(m in 1:M){
for(b in 1:B){
mki[,b,m] = mki2[m, (b-1)*K+(1:K)]
}
}
PSM1 = psm(mki[1,,-(1:90)])
PSM2 = psm(mki[2,,-(1:90)])
PSM3 = psm(mki[3,,-(1:90)])
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
## Function to plot the heatmap of the posterior probabilities of co-clustering
## of obs assigned to vertices
Plot_heat <- function(dissimlar_stable = dissimlar_stable,
I          = B){
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,I))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
P1 = Plot_heat(PSM1, B) + xlab("") + theme(legend.position="none")
P2 = Plot_heat(PSM2, B) + ylab("") + theme(legend.position="none")
P3 = Plot_heat(PSM3, B) + xlab("") + ylab("")
PHeat <- ggarrange(P1, P2, P3, labels = c("1", "2", "3"), nrow=1,
widths = c(1, 1, 1.3))
PHeat
PSM1 = psm(mki[1,,])
PSM2 = psm(mki[2,,])
PSM3 = psm(mki[3,,])
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
## Function to plot the heatmap of the posterior probabilities of co-clustering
## of obs assigned to vertices
Plot_heat <- function(dissimlar_stable = dissimlar_stable,
I          = B){
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,I))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
P1 = Plot_heat(PSM1, B) + xlab("") + theme(legend.position="none")
P2 = Plot_heat(PSM2, B) + ylab("") + theme(legend.position="none")
P3 = Plot_heat(PSM3, B) + xlab("") + ylab("")
P1
P2
P3
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,M))
for(m in 1:M){
for(b in 1:B){
mki[,b,m] = mki_all[m, (b-1)*K+(1:K)]
}
}
PSM1 = psm(mki[1,,])
PSM2 = psm(mki[2,,])
PSM3 = psm(mki[3,,])
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
## Function to plot the heatmap of the posterior probabilities of co-clustering
## of obs assigned to vertices
Plot_heat <- function(dissimlar_stable = dissimlar_stable,
I          = B){
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,I))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
P1 = Plot_heat(PSM1, B) + xlab("") + theme(legend.position="none")
P2 = Plot_heat(PSM2, B) + ylab("") + theme(legend.position="none")
P3 = Plot_heat(PSM3, B) + xlab("") + ylab("")
PHeat <- ggarrange(P1, P2, P3, labels = c("1", "2", "3"), nrow=1,
widths = c(1, 1, 1.3))
PHeat
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.5,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
## Function to plot the heatmap of the posterior probabilities of co-clustering
## of obs assigned to vertices
Plot_heat <- function(dissimlar_stable = dissimlar_stable,
I          = B){
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,I))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.5,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
P1 = Plot_heat(PSM1, B) + xlab("") + theme(legend.position="none")
P2 = Plot_heat(PSM2, B) + ylab("") + theme(legend.position="none")
P3 = Plot_heat(PSM3, B) + xlab("") + ylab("")
PHeat <- ggarrange(P1, P2, P3, labels = c("1", "2", "3"), nrow=1,
widths = c(1, 1, 1.3))
ggsave(plot=PHeat, file="Image/mik_coclusterprob_sorted2.pdf",
width=15, height=4.5)
PHeat
niter1
which(it >= niter1)[1]
M
M1
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,(M-M1)))
for(m in M1:M){
for(b in 1:B){
mki[,b,m] = mki_all[m, (b-1)*K+(1:K)]
}
}
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,(M-M1+1)))
for(m in M1:M){
for(b in 1:B){
mki[,b,m] = mki_all[m, (b-1)*K+(1:K)]
}
}
M1:M
length(M1:M)
mki  <- array(0,dim=c(K,B,(length(M1:M)))
M  <- nrow(mki_all)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,length(M1:M)))
for(m in M1:M){
for(b in 1:B){
mki[,b,m] = mki_all[m, (b-1)*K+(1:K)]
}
}
PSM1 = psm(mki[1,,])
PSM2 = psm(mki[2,,])
PSM3 = psm(mki[3,,])
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
## Function to plot the heatmap of the posterior probabilities of co-clustering
## of obs assigned to vertices
Plot_heat <- function(dissimlar_stable = dissimlar_stable,
I          = B){
dismat      = round(dissimlar_stable,2)
dismat      = reorder_dismat(dismat,groups=rep(1,I))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile()+ theme_bw()+
scale_y_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,I,length.out = 9)),
labels = floor(seq(1,I,length.out = 9))) +
xlab("OTU")+ylab("OTU")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.5,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
P1 = Plot_heat(PSM1, B) + xlab("") + theme(legend.position="none")
P2 = Plot_heat(PSM2, B) + ylab("") + theme(legend.position="none")
P3 = Plot_heat(PSM3, B) + xlab("") + ylab("")
library(ggpubr)
PHeat <- ggarrange(P1, P2, P3, labels = c("1", "2", "3"), nrow=1,
widths = c(1, 1, 1.3))
PHeat
K
B
Z=log(y[order(rowSums(y),decreasing = T),])
Z=log(y[order(rowSums(y),decreasing = T),]+0.05)
y[order(rowSums(y),decreasing = T),]
str(y[order(rowSums(y),decreasing = T),])
Z=y[order(rowSums(y),decreasing = T),]
Zmelts <- rbind(
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"),
reshape2::melt(Z[,point_SJ==2]) %>%
mutate(point_SJ = "2"),
reshape2::melt(Z[,point_SJ==3]) %>%
mutate(point_SJ = "3")
)
Z
dim(y)
reshape2::melt(Z[,point_SJ==1])
reshape2::melt(Z[,point_SJ==2])
reshape2::melt(Z[,point_SJ==3])
Zmelts <- rbind(
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"),
reshape2::melt(Z[,point_SJ==2]) %>%
mutate(point_SJ = "2"),
reshape2::melt(Z[,point_SJ==3]) %>%
mutate(point_SJ = "3")
Zmelts <- rbind(
Zmelts <- rbind(
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"),
reshape2::melt(Z[,point_SJ==2]) %>%
mutate(point_SJ = "2"),
reshape2::melt(Z[,point_SJ==3]) %>%
mutate(point_SJ = "3")
)
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"),
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1")
str(reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"))
str(reshape2::melt(Z[,point_SJ==2]) %>%
mutate(point_SJ = "2"))
str(reshape2::melt(Z[,point_SJ==3]) %>%
mutate(point_SJ = "3"))
Zmelts <- rbind(
reshape2::melt(Z[,point_SJ==1]) %>%
mutate(point_SJ = "1"),
reshape2::melt(Z[,point_SJ==2]) %>%
mutate(point_SJ = "2") #,
# reshape2::melt(Z[,point_SJ==3]) %>%
#   mutate(point_SJ = "3")
)
ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~s_star)+
scale_fill_viridis_c()
ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~point_SJ)+
scale_fill_viridis_c()
P = ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~point_SJ)+
scale_fill_viridis_c()
ggsave(plot=P, file="Image/mb-heatmap-y2.pdf", height = 2.5, width = 4)
summary(Zmelts)
Zmelts
Zmelts$Var1 = as.factor(Zmelts$Var1 )
P = ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~point_SJ)+
scale_fill_viridis_c()
P = ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~point_SJ)+
scale_fill_viridis_c()
P
Zmelts$Var1 = as.factor(as.integer(Zmelts$Var1))
P = ggplot(Zmelts,aes(Var2,Var1,fill=value)) +
geom_raster() +
facet_wrap(~point_SJ)+
scale_fill_viridis_c()
P
ggsave(plot=P, file="Image/mb-heatmap-y2.pdf", height = 5, width = 15)
