if (is.null(idx)){
idx=sample(1:np,10,replace=F)
}
if (fit | dta){
## fitted lines
I=length(idx)
if(pltmch=="n"){
df= data.frame(ages, my)
Plot = ggplot(data=df, aes(x=X1,y=X1.1))+
coord_cartesian(ylim=range(Ey,na.rm=T), xlim=range(ages,na.rm=T))+
ylab("Y") +xlab("ages")
}
if (fit){
if (ctr){
df = data.frame(ages = ages[,1], Ey = Ey[,1,idx])
df = melt(df,id="ages")
# Create the plot
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = lw, linetype = 1)+
theme(legend.position="none")
}
if (case){
df = data.frame(ages = ages[,2], Ey = Ey[,2,idx])
df = melt(df,id="ages")
# Create the plot
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = lw, linetype = 2)
}
} # fit
if (dta){
## add data
if (ctr) {
df = data.frame(ages = ages[,1], Ey = yy[,1,idx])
df = melt(df,id="ages")
# Create the plot
if (dtatype!="l"){
Plot <-Plot +
geom_point(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = 1)
} else {
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = 0.5)
}
}
# matlines(ages[,1], yy[,1,idx], col=1:I, lwd=0.53, lty=1,
#                 type=dtatype,pch=20)
if (case) {
df = data.frame(ages = ages[,2], Ey = yy[,2,idx])
df = melt(df,id="ages")
# Create the plot
if (dtatype!="l"){
Plot <-Plot +
geom_point(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)),
size = 2, shape=1)
} else {
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)),
size = 0.5, shape=1, linetype = 2) +
theme(legend.position="none")
}
}
} #dtad
} # fit | dta
if (prot){
## proteins w/o pat effects
df= data.frame(ages, mp)
Plot = ggplot(data=df, aes(x=X1,y=X1.1))+
coord_cartesian(ylim=range(Eyp,na.rm=T), xlim=range(ages,na.rm=T))+
ylab("mp") +xlab("ages")
if (ctr) {
df = data.frame(ages = ages[,1], Ey = Eyp0[,1,idx])
df = melt(df,id="ages")
# Create the plot
Plot = Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = "grey"), size = 1) +
theme(legend.position="none")+
coord_cartesian(ylim=range(df$value,na.rm=T), xlim=range(ages,na.rm=T))
}
if (case) {
df = data.frame(ages = ages[,2], Ey = Eyp0[,2,idx])
df = melt(df,id="ages")
# Create the plot
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = "pink"), size = 1, linetype = 2)
}
}
return(Plot)
}
idx=NULL
prot=F
lw=0.5
pltm=F
case=F
ctr=T
dtatype="p"
np = ncol(Ey)
npat = nrow(Ey)
pltmch = ifelse(pltm,"line","n")
if (is.null(idx)){
idx=sample(1:np,10,replace=F)
}
if (fit | dta){
## fitted lines
I=length(idx)
if(pltmch=="n"){
df= data.frame(ages, my)
Plot = ggplot(data=df, aes(x=X1,y=X1.1))+
coord_cartesian(ylim=range(Ey,na.rm=T), xlim=range(ages,na.rm=T))+
ylab("Y") +xlab("ages")
}
if (fit){
if (ctr){
df = data.frame(ages = ages[,1], Ey = Ey[,1,idx])
df = melt(df,id="ages")
# Create the plot
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = lw, linetype = 1)+
theme(legend.position="none")
}
if (case){
df = data.frame(ages = ages[,2], Ey = Ey[,2,idx])
df = melt(df,id="ages")
# Create the plot
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = lw, linetype = 2)
}
} # fit
if (dta){
## add data
if (ctr) {
df = data.frame(ages = ages[,1], Ey = yy[,1,idx])
df = melt(df,id="ages")
# Create the plot
if (dtatype!="l"){
Plot <-Plot +
geom_point(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = 1)
} else {
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)), size = 0.5)
}
}
# matlines(ages[,1], yy[,1,idx], col=1:I, lwd=0.53, lty=1,
#                 type=dtatype,pch=20)
if (case) {
df = data.frame(ages = ages[,2], Ey = yy[,2,idx])
df = melt(df,id="ages")
# Create the plot
if (dtatype!="l"){
Plot <-Plot +
geom_point(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)),
size = 2, shape=1)
} else {
Plot <-Plot +
geom_line(data=df, aes(x = ages, y = value, group = variable,
color = factor(variable)),
size = 0.5, shape=1, linetype = 2) +
theme(legend.position="none")
}
}
} #dtad
} # fit | dta
factor(variable)
variable
df$variable
df
fit=T,
dta=F,
prot=F,
idx=NULL,
lw=0.5,
pltm=F,
case=F,
ctr=T,
dtatype="p"
np = ncol(Ey)
npat = nrow(Ey)
pltmch = ifelse(pltm,"line","n")
length(NULL)
source("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/SEP_fcts.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/SEP_Reg.R", echo=TRUE)
P1
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P1$mapping$colour = NULL
P1
P1$colour = NULL
P1
P1$colour = "black"
P1$mapping$colour = "black"
P1
P1 + scale_colour_manual(#values=rep("black",length(unique(mtcars$cyl))),
guide=FALSE)
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P1 + scale_colour_manual(#values=rep("black",length(unique(mtcars$cyl))),
guide=FALSE)
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P1
P1 + scale_colour_manual(#values=rep("black",length(unique(mtcars$cyl))),
guide=FALSE)
P1 + scale_colour_manual(values="black"),
P1 + scale_colour_manual(values="black",
guide=FALSE)
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P1 + scale_colour_manual(values="black",
guide=FALSE)
P1 + scale_colour_manual(values=c("black",1),
guide=FALSE)
P1 + scale_colour_manual(values=c("black",1), guide=FALSE)
P1 = P1 + theme(axis.title = element_blank())
P2 = P2 + theme(axis.title = element_blank())
P3 = P3 + theme(axis.title = element_blank())
P4 = P4 + theme(axis.title = element_blank())
P  = plot_grid(P1, P2, P3, P4)
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P2 = plt_reg_ggplot(T,T,F,2,case=T,ctr=T)
P3 = plt_reg_ggplot(T,T,F,1001,case=T,ctr=T)
P4 = plt_reg_ggplot(T,T,F,1002,case=T,ctr=T)
library(cowplot)
P1 = P1 + theme(axis.title = element_blank())
P2 = P2 + theme(axis.title = element_blank())
P3 = P3 + theme(axis.title = element_blank())
P4 = P4 + theme(axis.title = element_blank())
P  = plot_grid(P1, P2, P3, P4)
# Individual plot
P  = P +
draw_label("ages", x= 0.52, y=  0, vjust=-0.5, angle= 0) +
draw_label("Y",    x=  0, y=0.55, vjust= 1.5, angle=90)
P
source("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/SEP_fcts.R", echo=TRUE)
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P2 = plt_reg_ggplot(T,T,F,2,case=T,ctr=T)
P3 = plt_reg_ggplot(T,T,F,1001,case=T,ctr=T)
P4 = plt_reg_ggplot(T,T,F,1002,case=T,ctr=T)
library(cowplot)
P1 = P1 + theme(axis.title = element_blank())
P2 = P2 + theme(axis.title = element_blank())
P3 = P3 + theme(axis.title = element_blank())
P4 = P4 + theme(axis.title = element_blank())
P  = plot_grid(P1, P2, P3, P4)
# Individual plot
P  = P +
draw_label("ages", x= 0.52, y=  0, vjust=-0.5, angle= 0) +
draw_label("Y",    x=  0, y=0.55, vjust= 1.5, angle=90)
P
P  = plot_grid(P1, P2)
P
P1 = plt_reg_ggplot(T,T,F,1,case=T,ctr=T)
P2 = plt_reg_ggplot(T,T,F,1001,case=T,ctr=T)
library(cowplot)
P1 = P1 + theme(axis.title = element_blank())
P2 = P2 + theme(axis.title = element_blank())
P  = plot_grid(P1, P2)
# Individual plot
P  = P +
draw_label("ages", x= 0.52, y=  0, vjust=-0.5, angle= 0) +
draw_label("Y",    x=  0, y=0.55, vjust= 1.5, angle=90)
P
ggsave(plot=P, file ="Image/Ind_prot.pdf",
width=20, height=8, units = 'cm')
# Extra to delete
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
# Check
summary(chain$`K-pat`)
summary(chain$`K-prot`)
plt_reg(F,T,F,of[1:20],case=T,ctr=T,dtatype="l")
plt_reg_ggplot(F,T,F,of[1:20],case=T,ctr=T,dtatype="l")
summary(chain$`sig2`)
df <- data.frame(y = as.vector(yt)/mean(sqrt(chain$`sig2`)))
P <- ggplot( df, aes(sample = y))
P <- P + stat_qq() + stat_qq_line()
P
ggsave(plot=P, file ="Image/qq_prot.pdf",
width=12, height=12, units = 'cm')
pltInit_reg()
str(mdpEta$s)
n
n
n
read.myfile("Data-and-Results/sProt.txt")
str(read.myfile("Data-and-Results/sProt.txt"))
I
J
str(read.myfile("Data-and-Results/sProt.txt",C))
str(read.myfile("Data-and-Results/sProt.txt",p=C))
str(read.myfile("Data-and-Results/sProt.txt",p=C, q=niter))
niter
read.myfile("Data-and-Results/sProt.txt")
I
J
C
sprot =read.myfile("Data-and-Results/sProt.txt")
sprot
colnames(sprot) = c("prot","cl")
sprot
sprot$prot = factor(sprot$prot)
sprot$prot      = factor(sprot$prot)
prot
sprot$prot
sprot
str(sprot)
str(sprot$prot)
str(sprot[,"prot"])
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot[,"cl"]    = as.integer(sprot[,"cl"])
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot[,"cl"]    = as.integer(sprot[,"cl"])
sprot           = read.myfile("Data-and-Results/sProt.txt")
colnames(sprot) = c("prot","cl")
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot[,"cl"]    = as.integer(sprot[,"cl"])
sprot[,"cl"]
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot[,"cl"]
sprot           = read.myfile("Data-and-Results/sProt.txt")
colnames(sprot) = c("prot","cl")
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot
sprot[,"prot"]  = factor(sprot[,"prot"], levels = as.character(1:C))
sprot           = read.myfile("Data-and-Results/sProt.txt")
colnames(sprot) = c("prot","cl")
sprot[,"prot"]  = factor(sprot[,"prot"], levels = as.character(1:C))
sprot
sprot[,"prot"]  = as.factor(sprot[,"prot"])
sprot
sprot[,"prot"]  = factor(sprot[,"prot"])
sprot[,"cl"]
integer(sprot[,"cl"])
sprot[,"cl"]
sprot           = read.myfile("Data-and-Results/sProt.txt")
sProt <- read.csv("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/Data-and-Results/sProt.txt", header=FALSE)
View(sProt)
sProt <- read.csv("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/Data-and-Results/sProt.txt", header=FALSE)
sProt <- read.csv("../Data-and-Results/sProt.txt", header=FALSE)
sProt <- read.csv("/Data-and-Results/sProt.txt", header=FALSE)
sProt <- read.csv("./Data-and-Results/sProt.txt", header=FALSE)
# Leggi senza virgole
colnames(sProt) = c("prot","cl")
str(sProt)
sProt[,"prot"]  = factor(sProt[,"prot"])
table(sProt[,"prot"] )
# Leggi senza virgole
Clust_prot_mat = matrix(NA, nrow=nrow(sProt)/C, ncol=C)
melt(Clust_prot_mat, id.vars="prot")
Clust_prot_mat
table(Clust_prot_mat)
table(Clust_prot_mat[,"cl"])
Clust_prot_mat[,"cl"]
table(sProt[,"cl"])
melt(sProt, id.vars="prot")
Clust_prot_mat  = melt(sProt, id.vars="prot")
Clust_prot_mat
for (lev in levels(sProt[,"prot"]))
levels(sProt[,"prot"])
levels(sProt[,"prot"])
sProt <- read.csv("./Data-and-Results/sProt.txt", header=FALSE)
# Leggi senza virgole
colnames(sProt) = c("prot","cl")
sProt[,"prot"]  = factor(sProt[,"prot"])
Clust_prot_mat = matrix(NA, nrow=nrow(sProt)/C, ncol=C)
for (lev in levels(sProt[,"prot"])){
Clust_prot_mat[,lev] = sProt[sProt[,"prot"]==lev,"cl"]
}
lev
sProt[,"prot"]==lev
sum(sProt[,"prot"]==lev)
sProt[sProt[,"prot"]==lev,"cl"]
lev
Clust_prot_mat[,lev]
colnames(Clust_prot_mat) = levels(sProt[,"prot"])
for (lev in levels(sProt[,"prot"])){
Clust_prot_mat[,lev] = sProt[sProt[,"prot"]==lev,"cl"]
}
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
# Extra to delete
# Reorder rows and columns (observations) of a dissimilarity matrix intra groups
# and possibly reorder also the groups (batch of observations)
reorder_dismat <-  function(dismat, groups, order.groups=NULL){
# Use correlation between variables as distance
order.dis   = integer(0)
J           = length(unique(groups))
if(is.null(order.groups)){
order.j   = 1:J
} else {
order.j   = order.groups
}
for (j in order.j){
groups.j  = which(groups==j)
dd        = as.dist((1-dismat[groups.j, groups.j])/2)
hc        = hclust(dd)
order.dis = c(order.dis, hc$order+length(order.dis))
}
dismat      = dismat[order.dis, order.dis]
dismat      = dismat[nrow(dismat):1,]
}
# Check
summary(chain$`K-pat`)
summary(chain$`K-prot`)
plt_reg(F,T,F,of[1:20],case=T,ctr=T,dtatype="l")
plt_reg_ggplot(F,T,F,of[1:20],case=T,ctr=T,dtatype="l")
summary(chain$`sig2`)
df <- data.frame(y = as.vector(yt)/mean(sqrt(chain$`sig2`)))
P <- ggplot( df, aes(sample = y))
P <- P + stat_qq() + stat_qq_line()
P
ggsave(plot=P, file ="Image/qq_prot.pdf",
width=12, height=12, units = 'cm')
sProt <- read.csv("./Data-and-Results/sProt.txt", header=FALSE)
# Leggi senza virgole
colnames(sProt) = c("prot","cl")
sProt[,"prot"]  = factor(sProt[,"prot"])
Clust_prot_mat = matrix(NA, nrow=nrow(sProt)/C, ncol=C)
colnames(Clust_prot_mat) = levels(sProt[,"prot"])
for (lev in levels(sProt[,"prot"])){
Clust_prot_mat[,lev] = sProt[sProt[,"prot"]==lev,"cl"]
}
Plot_heat_vertex <- function(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map){
dismat      = round(dissimlar_stable, 2)
dismat      = reorder_dismat(dismat,groups=rep(1, N_S_map))
plot_dismat = reshape2::melt(dismat)
ggplot(data=plot_dismat, aes(x=factor(Var1), y=factor(Var2), fill=value))+
geom_tile() + theme_bw()+
scale_y_discrete(limits = seq(N_S_map, 1),
breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
scale_x_discrete(breaks = floor(seq(1,N_S_map,length.out = 9)),
labels = floor(seq(1,N_S_map,length.out = 9))) +
xlab("observation")+ylab("observation")+
scale_fill_gradientn(colours = c("white", "yellow", "red"),
values = rescale(c(0,0.25,1)), space = "Lab", name="")+
theme(legend.position = "right", text = element_text(size=20))
}
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
library(salso)
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = N_S_map)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable,
N_S_map          = C)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = dissimlar_stable)
dissimlar_stable
str(dissimlar_stable)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = as.matrix(dissimlar_stable))
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = as.matrix(dissimlar_stable),
N_S_map          = C)
library(reshape2)
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = as.matrix(dissimlar_stable),
N_S_map          = C)
library(scales)
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = as.matrix(dissimlar_stable),
N_S_map          = C)
library(salso)
library(reshape2)
library(scales)
library(plyr)          # version 1.8.8
# Compute probability of co-clustering of cells assigned to vertices
dissimlar_stable = psm(Clust_prot_mat)
# Posterior probabilities of co-clustering of obs assigned to vertices.
# (Figure 2b in the main manuscript)
Plot_2b = Plot_heat_vertex(dissimlar_stable = as.matrix(dissimlar_stable),
N_S_map          = C)
