na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
Y0=data3[,2:39]                ## separate OTU counts
rownames(Y0)=data3[,1]         ## and OTU names as row names..
n <- dim(Y0)[2]                ## n patients
drop = apply(Y0==0,1,sum)>n/4  ## drop all OTUS with more than n/4 0's
Y  <- Y0[!drop,]               ## dropping 20 of the originally 119 OTU's
## now total # 0's is only 5.
gammas=colMeans(Y)
Y=sapply(1:n,function(i) as.matrix(Y)[,i]/gammas[i])
y=log(Y+0.05)                  ## log transform (we only have 5 0's)
return(list(y=y,Y=Y)) ## return both - the log transf "y" and raw "Y"
}
## create global variables for data & fied dimensions
out <- read.dta() ## maybe as.matrix(..)?? See if needed..
y <-   out$y    ## log transf
Y  <-  out$Y    ## abs scale
N <- dim(y)[1]*dim(y)[2]  # global var's
n <- dim(y)[2] # # patients
B <- dim(y)[1] # # OTU's
##### max size of the subject (K) and OTU (L) partition
K=10
L=15
## hyperprior pars
alpha= 1      ## for GEM prior on pi
beta = 1      ## GEM prior on w[k], k=1...K
## hyperpars (use "empirical bayes" i.e., match sample moments)
mu0=mean(as.matrix(y))                  ## mu_l ~ N(mu0,sig0)
sig0=3  ## SD!
a0=3                                    ## sig2_l ~ Ga(a0/2, b0/2)
b0=var(c(y))/4
source("SEP_fcts.R")
ex()
Sj
mcmc(niter, pi=pi,w=w,Sj=Sj,mki=mki,mu=mu,sig2=sig2, niter0=niter0)
set.seed(1963)
pi = init.pi()
w = init.w()
Sj = init.Sj(3)
out = init.muSig()
mu = out$mu
sig2 = out$sig2
mki = init.Mki(mu,sig2,Sj,w)
Sj = mcmc(niter, pi=pi,w=w,Sj=Sj,mki=mki,mu=mu,sig2=sig2, niter0=niter0)
klist = fig4(niter,niter0,niter1)
rcR(1,2)
# rcR(1,2)
fig5(klist, niter,niter0,niter1)
fig4  <- function(niter=NULL, niter0=NULL, niter1=NULL)
{# create plots 4,5 & 6
## Fig 4 ###############
SjMC  <- read.myfile("Sj.txt",n)
mu = read.myfile("mu.txt", L)
Sj  <- SjMC[nrow(SjMC),]
nk=sapply(1:K,function(k) sum(Sj==k))
K1 = sum(nk>1)
klist = which(nk>1)
s  <- apply(Y,1,sum)
idx <- order(s,decreasing=T)
kdx  <- which( nk>0 )
sk = matrix(0,nrow=K,ncol=B)
for (k in klist){ # non-empty clusters; clusters k=1,2,3
sk[k,] = apply(Y[,Sj==k],1,sum)
}
Sk = apply(sk,1,sum)
sk = sk/Sk
csk = apply(sk[,idx],1,cumsum) # cum sum for each k, OTU's ordered by total frequ
lwd = nk/max(nk)*3
matplot(1:B, csk[,klist],type="l", xlab="OTU", ylab="CUMSUM",lwd=lwd[klist],bty="l")
legend(60,0.6, col=klist,lty=klist,legend=klist,bty="n")
return(klist)
}
klist
fig5 <- function(klist, niter=NULL, niter0=NULL, niter1=NULL)
{## klist = list of subject clusters for which to plot nested clusters
## get klist as return value from fig4()
## prepares Fig 5 ##
mki2 <- read.myfile("mki.txt",K)
summ = read.myfile("iter.txt")
it = summ[,1]
col = brewer.pal(9, name="YlOrRd")
## col = viridis(10)
M  <- nrow(mki2)
M1 = which(it >= niter1)[1]
mki  <- array(0,dim=c(K,B,M))
for(m in 1:M)
for(b in 1:B)
mki[,b,m] = mki2[m, (b-1)*K+(1:K)]
pk  <- array(0,dim=c(B,B,K))
for(k in klist){
for(m in M1:M)
for(b in 2:B)
for(b2 in 1:(b-1)){
pk[b,b2,k] = pk[b,b2,k]+(mki[k,b,m]==mki[k,b2,m])
}#k
pk[,,k] = pk[,,k]/(M-M1+1)
pk[,,k] = pk[,,k] + t(pk[,,k])
C = t(mki[k,,M1:M])
ck = salso(C)
idx = order(ck)
## for plotting
pkp = (pk[,,k])
image(pkp[idx,idx])
}# k
}
fmap = function(x)
{
1/(1+exp(-20*(x-0.25)))
}
fn <- "w.txt"; p <- K; q  <-  L
read.myfile  <- function(fn, p=NULL, q=NULL)
{ # read matrix (q=NULL) or array (q>0)
X  <- as.matrix(read.table(fn))
if (!is.null(q)){ # read array
niter = nrow(X)/p
X2  <- array(c(X), dim=c(p,niter,q))
X <- X2
}
return(X)
}
plt.Gk  <- function(w,mu,sig2,add=F,Sj,M=100)
{ ## plots current Gk
nk=sapply(1:K,function(k) sum(Sj==k))
xx <- seq(from=-3,to=3,length=M)
yy  <- matrix(0,nrow=K,ncol=M)
for(h in 1:K){
for(l in 1:L)
yy[h,]  <- yy[h,] + w[h,l]*dnorm(xx,m=mu[l],sd=sqrt(sig2[l]))
}
lwd = nk/max(nk)*3
if (!add){
matplot(xx,t(yy),bty="l",type="l",lwd=lwd)
legend(2,max(yy),legend=1:K,col=1:K,lty=1:K,bty="n",adj=1)
} else {
## text(rep(xx[M],K), yy[,M], text=(1:K),adj=0)
matlines(xx, t(yy),type="l", lwd=lwd,col=1)
}
}
plt.Gkbar  <- function()
{
w  <- read.myfile("w.txt",K,L) # w[k, iter, l]
niter  <- dim(w)[2]
pi <- read.myfile("pi.txt",K)
mu  <- read.myfile("mu.txt",L)
sig2  <- read.myfile("sig.txt",L)
Sj  <-  read.myfile("Sj.txt",K)
## clustering of patients
pij  <- matrix(0,n,n)
for(iter in 1:niter){
Sj1  <-  Sj[1,]
}
}
out$y
# Load relevant libraries, functions and data ----------------------------------
rm(list=ls())
# Set the working directory to the current folder
# Code to set the working directory to the current folder from RStudio
library(rstudioapi) # version 0.15
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(DirichletReg)
library(invgamma)
library(tidyr)
library(dplyr)
library(truncnorm)
library(scales)
library(viridisLite)
library(ggplot2)
library(RColorBrewer)
library(salso)
###################################################N
## create global variables for data & field dimensions
# Read and clean the data
###################################################N
## read in data
read.dta  <- function()
{##read-in and clean data
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
data2=pivot_wider(data[,1:3],names_from = Sample,values_from = Abundance)
na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
Y0=data3[,2:39]                ## separate OTU counts
rownames(Y0)=data3[,1]         ## and OTU names as row names..
n <- dim(Y0)[2]                ## n patients
drop = apply(Y0==0,1,sum)>n/4  ## drop all OTUS with more than n/4 0's
Y  <- Y0[!drop,]               ## dropping 20 of the originally 119 OTU's
## now total # 0's is only 5.
gammas=colMeans(Y)
Y=sapply(1:n,function(i) as.matrix(Y)[,i]/gammas[i])
y=log(Y+0.05)                  ## log transform (we only have 5 0's)
return(list(y=y,Y=Y)) ## return both - the log transf "y" and raw "Y"
}
## create global variables for data & fied dimensions
out <- read.dta() ## maybe as.matrix(..)?? See if needed..
y <-   out$y    ## log transf
Y  <-  out$Y    ## abs scale
N <- dim(y)[1]*dim(y)[2]  # global var's
n <- dim(y)[2] # # patients
B <- dim(y)[1] # # OTU's
##### max size of the subject (K) and OTU (L) partition
K=10
L=15
## hyperprior pars
alpha= 1      ## for GEM prior on pi
beta = 1      ## GEM prior on w[k], k=1...K
out
3.141593
Sj
source("~/Library/CloudStorage/Dropbox/GitHub/SE-BNP/SEP-RPM.R", echo=TRUE)
w  <- read.myfile("w.txt",K,L) # w[k, iter, l]
niter  <- dim(w)[2]
pi <- read.myfile("pi.txt",K)
mu  <- read.myfile("mu.txt",L)
sig2  <- read.myfile("sig.txt",L)
Sj  <-  read.myfile("Sj.txt",K)
###### plot cdfs/pdfs of microbiomes in different country subjects
y=data3[,2:39]
gammas=colMeans(y)
y=sapply(1:n,function(i) as.matrix(y)[,i]/gammas[i])
y1=y[order(rowSums(y),decreasing = T),]
data_country=pivot_wider(data[,c(1:2,6)],names_from = Sample,values_from = nationality)
data_country=data_country[1,2:dim(data_country)[2]]
data_country=as.matrix(data_country)[1,]
names(data_country)=NULL
data_label=data_country
data_label[data_country=='AFR']=1
data_label[data_country=='AAM']=2
data_label2=data_country
data_label2[data_country=='AFR']='R-AF'
data_label2[data_country=='AAM']='AM-AF'
y_af=as.matrix(y1[,data_country=='AFR'])
y_am=as.matrix(y1[,data_country=='AAM'])
pdf_af=rowSums(y_af)/sum(rowSums(y_af))
pdf_am=rowSums(y_am)/sum(rowSums(y_am))
pdf_all=rowSums(y1)/sum(rowSums(y1))
ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU',y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')
ggsave("empiricalclustersgg.pdf",width=5,height=3,units = 'in')
ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU',y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')
############ exploratory plots ###########
out
out
############ exploratory plots ###########
str(out)
############ exploratory plots ###########
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
Dietswap_dataset
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
############ exploratory plots ###########
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
data2=pivot_wider(data[,1:3],names_from = Sample,values_from = Abundance)
na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
data3
############ exploratory plots ###########
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
data2=pivot_wider(data[,1:3],names_from = Sample,values_from = Abundance)
na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
y=data3[,2:39]
gammas=colMeans(y)
y=sapply(1:n,function(i) as.matrix(y)[,i]/gammas[i])
y1=y[order(rowSums(y),decreasing = T),]
data_country=pivot_wider(data[,c(1:2,6)],names_from = Sample,values_from = nationality)
data_country=data_country[1,2:dim(data_country)[2]]
data_country=as.matrix(data_country)[1,]
names(data_country)=NULL
data_label=data_country
data_label[data_country=='AFR']=1
data_label[data_country=='AAM']=2
data_label2=data_country
data_label2[data_country=='AFR']='R-AF'
data_label2[data_country=='AAM']='AM-AF'
y_af=as.matrix(y1[,data_country=='AFR'])
y_am=as.matrix(y1[,data_country=='AAM'])
pdf_af=rowSums(y_af)/sum(rowSums(y_af))
pdf_am=rowSums(y_am)/sum(rowSums(y_am))
pdf_all=rowSums(y1)/sum(rowSums(y1))
ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU',y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')
theme_set(theme_bw(base_size = 14))
ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU',y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')
P = ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU', y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=5, height=3, units = 'in')
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=5, height=3, units = 'cm')
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=50, height=30, units = 'cm')
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=10, height=6, units = 'cm')
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=20, height=12, units = 'cm')
P = ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='R-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AM-AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU', y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')+  labs(color=NULL)
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=20, height=12, units = 'cm')
P
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=16, height=12, units = 'cm')
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
data2=pivot_wider(data[,1:3],names_from = Sample,values_from = Abundance)
na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
y=data3[,2:39]
gammas=colMeans(y)
y=sapply(1:n,function(i) as.matrix(y)[,i]/gammas[i])
y1=y[order(rowSums(y),decreasing = T),]
data_country=pivot_wider(data[,c(1:2,6)], names_from = Sample,
values_from = nationality)
data_country=data_country[1,2:dim(data_country)[2]]
data_country=as.matrix(data_country)[1,]
names(data_country)=NULL
data_label=data_country
data_label[data_country=='AFR']=1
data_label[data_country=='AAM']=2
data_label2 = data_country
data_label2[data_country=='AFR'] = 'RU'
data_label2[data_country=='AAM'] = 'AA'
y_af=as.matrix(y1[,data_country=='AFR'])
y_am=as.matrix(y1[,data_country=='AAM'])
pdf_af=rowSums(y_af)/sum(rowSums(y_af))
pdf_am=rowSums(y_am)/sum(rowSums(y_am))
pdf_all=rowSums(y1)/sum(rowSums(y1))
P = ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='RU'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AA'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU', y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')+  labs(color=NULL)
P
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=16, height=12, units = 'cm')
P = ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AA'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU', y="Cumulative Relative Frequencies")+
theme(legend.position = 'bottom')+  labs(color=NULL)
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=16, height=12, units = 'cm')
P
dfplot_af=cbind(1:119,rowMeans(y_af)) %>% data.frame()
colnames(dfplot_af) =  c("OTU","Abundace")
ggplot(dfplot_af,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU',y='Scaled Abundance')
P1 = ggplot(dfplot_af,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU',y='Scaled Abundance')
P1 = ggplot(dfplot_af,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU',y='Scaled Abundance')
ggsave(plot=P1, file ="Image/normedcount-hist-af.pdf",
width=5, height=3.5, units = 'in')
P1 = ggplot(dfplot_af,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU (AF)',y='Scaled Abundance')
ggsave(plot=P1, file ="Image/normedcount-hist-af.pdf",
width=5, height=3.5, units = 'in')
dfplot_am=cbind(1:119,rowMeans(y_am)) %>% data.frame()
colnames(dfplot_am) =  c("OTU","Abundace")
P1 = ggplot(dfplot_af,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU (AF)',y='Scaled Abundance')
ggsave(plot=P1, file ="Image/normedcount-hist-af.pdf",
width=5, height=3.5, units = 'in')
dfplot_am=cbind(1:119,rowMeans(y_am)) %>% data.frame()
colnames(dfplot_am) =  c("OTU","Abundace")
P2 = ggplot(dfplot_am,aes(OTU,Abundace))+
geom_bar(stat='identity')+
labs(x='OTU (AA)',y='Scaled Abundance')
ggsave(plot=P2, file ="Image/normedcount-hist-am.pdf",
width=5, height=3.5, units = 'in')
P = ggplot()+
geom_line(aes(0:119,c(0,cumsum(pdf_af)),col='AF'))+
geom_line(aes(0:119,c(0,cumsum(pdf_am)),col='AA'))+
geom_line(aes(0:119,c(0,cumsum(pdf_all)),col='ALL'))+
labs(x='OTU', y="Cumulative Relative Frequencies")+
theme(legend.position = 'right')+  labs(color=NULL)
ggsave(plot=P, file ="Image/Emp_CDF_OTU.pdf",
width=16, height=12, units = 'cm')
#######plot dendograms based on hierarchical clustering
colvar <- function(y){
return(sapply(1:dim(y)[2],function(j) var(y[,j])))
}
rowvar <- function(y){
return(sapply(1:dim(y)[1],function(i) var(y[i,])))
}
rvy=rowvar(y)
yhc=y[order(rvy,decreasing = T)<=10,]
rownames(yhc)=rownames(y)[order(rvy,decreasing = T)<=10]
colnames(yhc)=data_label
d <- dist(yhc, method = "euclidean")
hc2 <- hclust(d, method = "complete" )
plot(hc2,cex=0.5,main='')
d <- dist(t(yhc), method = "euclidean")
hc2 <- hclust(d, method = "complete" )
plot(hc2,cex=0.5,main='')
dend_expr <- as.dendrogram(hc2)
tree_labels<- dendro_data(dend_expr, type = "rectangle")
tree_labels$labels <- cbind(tree_labels$labels, Subject = as.factor(data_label2))
ggplot() +
geom_segment(data = segment(tree_labels), aes(x=x, y=y, xend=xend, yend=yend))+
geom_segment(data = tree_labels$segments %>%
filter(yend == 0) %>%
left_join(tree_labels$labels, by = "x"), aes(x=x, y=y.x, xend=xend, yend=yend, color = Subject)) +
#geom_text(data = label(tree_labels), aes(x=x, y=y, label=label, colour = Subject, hjust=-1), size=2) +
coord_flip() +
scale_y_reverse(expand=c(0.2, 0)) +
scale_colour_brewer(palette = "Dark2") +
theme_dendro() #+
ggplot() +
geom_segment(data = segment(tree_labels), aes(x=x, y=y, xend=xend, yend=yend))+
geom_segment(data = tree_labels$segments %>%
filter(yend == 0) %>%
left_join(tree_labels$labels, by = "x"), aes(x=x, y=y.x, xend=xend, yend=yend)) +
geom_text(data = label(tree_labels), aes(x=x, y=y, label=label, hjust=-1), size=2) +
coord_flip() +
scale_y_reverse(expand=c(0.2, 0)) +
scale_colour_brewer(palette = "Dark2") +
theme_dendro() #+
library("ape")
# Default plot
plot(as.phylo(hc2), cex = 0.6, label.offset = 0.5)
legend("topright",c(1,2),legend("R-AF","Af-AM"))
library(ggdendro)
ggdendrogram(hc2,cex=0.5)
ggdendrogram(hc2, rotate = TRUE, theme_dendro = T)
#######plot dendograms based on hierarchical clustering
colvar <- function(y){
return(sapply(1:dim(y)[2],function(j) var(y[,j])))
}
rowvar <- function(y){
return(sapply(1:dim(y)[1],function(i) var(y[i,])))
}
rvy=rowvar(y)
yhc=y[order(rvy,decreasing = T)<=10,]
rownames(yhc)=rownames(y)[order(rvy,decreasing = T)<=10]
colnames(yhc)=data_label
d <- dist(yhc, method = "euclidean")
hc2 <- hclust(d, method = "complete" )
plot(hc2,cex=0.5,main='')
d <- dist(t(yhc), method = "euclidean")
hc2 <- hclust(d, method = "complete" )
plot(hc2,cex=0.5,main='')
dend_expr <- as.dendrogram(hc2)
tree_labels<- dendro_data(dend_expr, type = "rectangle")
tree_labels$labels <- cbind(tree_labels$labels, Subject = as.factor(data_label2))
ggplot() +
geom_segment(data = segment(tree_labels), aes(x=x, y=y, xend=xend, yend=yend))+
geom_segment(data = tree_labels$segments %>%
filter(yend == 0) %>%
left_join(tree_labels$labels, by = "x"), aes(x=x, y=y.x, xend=xend, yend=yend, color = Subject)) +
#geom_text(data = label(tree_labels), aes(x=x, y=y, label=label, colour = Subject, hjust=-1), size=2) +
coord_flip() +
scale_y_reverse(expand=c(0.2, 0)) +
scale_colour_brewer(palette = "Dark2") +
theme_dendro() #+
ggplot() +
geom_segment(data = segment(tree_labels), aes(x=x, y=y, xend=xend, yend=yend))+
geom_segment(data = tree_labels$segments %>%
filter(yend == 0) %>%
left_join(tree_labels$labels, by = "x"), aes(x=x, y=y.x, xend=xend, yend=yend)) +
geom_text(data = label(tree_labels), aes(x=x, y=y, label=label, hjust=-1), size=2) +
coord_flip() +
scale_y_reverse(expand=c(0.2, 0)) +
scale_colour_brewer(palette = "Dark2") +
theme_dendro() #+
library("ape")
# Default plot
plot(as.phylo(hc2), cex = 0.6, label.offset = 0.5)
legend("topright",c(1,2),legend("R-AF","Af-AM"))
library(ggdendro)
legend("topright",c(1,2),legend("AF","AA"))
# Default plot
plot(as.phylo(hc2), cex = 0.6, label.offset = 0.5)
legend("topright",c(1,2),legend("AF","AA"))
library(ggdendro)
ggdendrogram(hc2,cex=0.5)
ggdendrogram(hc2, rotate = TRUE, theme_dendro = T)
hc2
