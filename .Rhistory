lines(c(0,cumsum(pdf_s2)),type='l',col='red')
lines(c(0,cumsum(pdf_s3)),type='l',col='blue')
pdf_s1=rowSums(y_s1)/sum(rowSums(y_s1))
y1   = y[order(rowSums(y),decreasing = T),]
y_s1 = as.matrix(y1[, point_SJ==1])
y_s2 = as.matrix(y1[, point_SJ==2])
y_s3 = as.matrix(y1[, point_SJ==3])
pdf_s1=rowSums(y_s1)/sum(rowSums(y_s1))
pdf_s2=rowSums(y_s2)/sum(rowSums(y_s2))
pdf_s3=rowSums(y_s3)/sum(rowSums(y_s3))
plot(c(0,cumsum(pdf_s1)),type='l',ylim=c(0,1),xlim=c(0,120),xlab='OTU',ylab="CDF of Relative Abundance")
lines(c(0,cumsum(pdf_s2)),type='l',col='red')
lines(c(0,cumsum(pdf_s3)),type='l',col='blue')
### plot according to country label
data_country=pivot_wider(data[,c(1:2,6)],names_from = Sample,values_from = nationality)
data_country=data_country[1,2:dim(data_country)[2]]
y_af=as.matrix(y1[,data_country=='AFR'])
y_am=as.matrix(y1[,data_country=='AAM'])
as.matrix(data_country[point_SJ==1])[1,]
as.matrix(data_country[point_SJ==2])[1,]
as.matrix(data_country[point_SJ==3])[1,]
pdf_af=rowSums(y_af)/sum(rowSums(y_af))
pdf_am=rowSums(y_am)/sum(rowSums(y_am))
plot(c(0,cumsum(pdf_af)),type='l',ylim=c(0,1),xlim=c(0,120),xlab='OTU',ylab="CDF of Relative Abundance")
lines(c(0,cumsum(pdf_am)),type='l',col='red')
mik_store[T,1,order(rowSums(y),decreasing = T)]
mik[T,1,order(rowSums(y),decreasing = T)]
mki
mik[1,order(rowSums(y),decreasing = T)]
mik[2,order(rowSums(y),decreasing = T)]
mik[3,order(rowSums(y),decreasing = T)]
mik
hist(mik[T,1,])
hist(mik[T,2,])
par(mar=c(2,2,1,1))
par(mfrow=c(3,1))
hist(mki[T,1,])
hist(mki[T,2,])
hist(mki[T,3,])
T
str(mki)
mki[T,1,]
str(mki[T,1,])
y1   = y[order(rowSums(y),decreasing = T),]
y_s1 = as.matrix(y1[, point_SJ==1])
y_s2 = as.matrix(y1[, point_SJ==2])
y_s3 = as.matrix(y1[, point_SJ==3])
pdf_s1=rowSums(y_s1)/sum(rowSums(y_s1))
pdf_s2=rowSums(y_s2)/sum(rowSums(y_s2))
pdf_s3=rowSums(y_s3)/sum(rowSums(y_s3))
plot(c(0,cumsum(pdf_s1)),type='l',ylim=c(0,1),xlim=c(0,120),xlab='OTU',ylab="CDF of Relative Abundance")
lines(c(0,cumsum(pdf_s2)),type='l',col='red')
lines(c(0,cumsum(pdf_s3)),type='l',col='blue')
### plot according to country label
data_country=pivot_wider(data[,c(1:2,6)],names_from = Sample,values_from = nationality)
y_af=as.matrix(y1[,data_country=='AFR'])
y_am=as.matrix(y1[,data_country=='AAM'])
mik[1,order(rowSums(y),decreasing = T)]
mik[2,order(rowSums(y),decreasing = T)]
mik[3,order(rowSums(y),decreasing = T)]
w[T,1,]
w[T,2,]
w[T,3,]
###### Do David Dahl
idx=1:T
idx2=idx[idx>7500]
T
idx
fig4()
fig4
fig4(niter  = 1e4, #iteration MCMC
niter0 = 1e3, # estimating Sj after niter0 iterations and stop updating Sj
niter1 = 2e3) # just for plot
y1   = y[order(rowSums(y),decreasing = T),]
y_s1 = as.matrix(y1[, point_SJ==1])
y_s2 = as.matrix(y1[, point_SJ==2])
y_s3 = as.matrix(y1[, point_SJ==3])
pdf_s1=rowSums(y_s1)/sum(rowSums(y_s1))
pdf_s2=rowSums(y_s2)/sum(rowSums(y_s2))
pdf_s3=rowSums(y_s3)/sum(rowSums(y_s3))
plot(c(0,cumsum(pdf_s1)),type='l',ylim=c(0,1),xlim=c(0,120),xlab='OTU',ylab="CDF of Relative Abundance")
lines(c(0,cumsum(pdf_s2)),type='l',col='red')
lines(c(0,cumsum(pdf_s3)),type='l',col='blue')
#one_pos means positions of 1s, it is to save space for the binary matrix
one_pos=list()
for(tt in 1:TT){
ii=idx2[tt]
s_temp=S_store[[ii]]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,n,n)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos[[tt]]=which(svec==1)
print(tt)
}
TT
TT = niter-niter1
TT = niter-niter0
TT = niter
TT = niter
for(tt in 1:TT){
ii=idx2[tt]
s_temp=S_store[[ii]]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,n,n)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos[[tt]]=which(svec==1)
print(tt)
}
TT = niter
for(tt in 1:TT){
ii=idx2[tt]
s_temp=Sj[[ii]]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,n,n)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos[[tt]]=which(svec==1)
print(tt)
}
TT = niter
for(tt in 1:TT){
ii=idx2[tt]
s_temp=Sj[ii]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,n,n)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos[[tt]]=which(svec==1)
print(tt)
}
hem_dist=rep(0, TT)
hem_dist_mat=matrix(0,TT,TT)
for(ii in 1:TT){
for(jj in ii:TT){
print(c(ii,jj))
s1=rep(0,n*(n-1)/2)
s2=rep(0,n*(n-1)/2)
s1[one_pos[[ii]]]=1
s2[one_pos[[jj]]]=1
hem_dist_mat[ii,jj]=sum(s1!=s2)*2
}
}
hem_dist_mat2=t(hem_dist_mat)+hem_dist_mat
hem_dist = rowMeans(hem_dist_mat2)
which.min(hem_dist)
### from the cluster assignmebt and iteration picked from result above,
### do David Dahl for the nested partitions
idx_star=idx2[which.min(hem_dist)]
s_star=S_store[idx_star,]
idx_star_all=idx[sapply(1:T, function(i) sum(S_store[i,]==s_star)==n)]
idx_star_m=idx_star_all[idx_star_all>8000]
idx_star_all=idx[sapply(1:T, function(i) sum(Sj[i,]==s_star)==n)]
idx_star_m=idx_star_all[idx_star_all>8000]
### from the cluster assignmebt and iteration picked from result above,
### do David Dahl for the nested partitions
idx_star=idx2[which.min(hem_dist)]
s_star=S_store[idx_star,]
s_star=Sj[idx_star,]
idx_star_all=idx[sapply(1:T, function(i) sum(Sj[i,]==s_star)==n)]
idx_star_m=idx_star_all[idx_star_all>8000]
TT=length(idx_star_m)
one_pos_m1=list()
one_pos_m2=list()
one_pos_m3=list()
for(tt in 1:TT){
ii=idx_star_m[tt]
s_temp=mik_store[ii,1,]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,B,B)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos_m1[[tt]]=which(svec==1)
s_temp=mik_store[ii,2,]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,B,B)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos_m2[[tt]]=which(svec==1)
s_temp=mik_store[ii,3,]
cl_temp=unique(s_temp)
s_mat_temp=matrix(0,B,B)
for(ss in cl_temp){
s_mat_temp[which(s_temp==ss),which(s_temp==ss)]=1
}
svec=s_mat_temp[lower.tri(s_mat_temp,diag = F)]
one_pos_m3[[tt]]=which(svec==1)
print(tt)
}
# Gio's plot
library(reshape2)
#ggplot needs a dataframe
data <- as.data.frame(y)
#id variable for position in matrix
data$id <- point_SJ
data
str(data)
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#id variable for position in matrix
data$id <- point_SJ
#reshape to long format
plot_data <- melt(data,id.var="id")
#plot
ggplot(plot_data, aes(x=id,y=value,group=variable,colour=variable)) +
geom_point()+
geom_line(aes(lty=variable)) +
scale_y_log10(breaks=c(1,2,5,10,25))
plot_data
#plot
ggplot(plot_data, aes(y=value,group=id,colour=id)) +
geom_point()+
geom_line(aes(lty=variable)) +
scale_y_log10(breaks=c(1,2,5,10,25))
#plot
ggplot(plot_data, aes(x=1:100,y=value,group=id,colour=id)) +
geom_point()+
geom_line(aes(lty=variable)) +
scale_y_log10(breaks=c(1,2,5,10,25))
plot_data
data <- as.data.frame(y)
#id variable for position in matrix
data$id <- 1:nrow(data)
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#id variable for position in matrix
data$id <- 1:nrow(data)
data$sj <- point_SJ
#reshape to long format
plot_data <- melt(data,id.var="id")
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#id variable for position in matrix
data$id <- 1:nrow(data)
data$sj <- point_SJ
#reshape to long format
plot_data <- melt(data,id.var="id")
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#id variable for position in matrix
data$id <- 1:nrow(data)
# data$sj <- point_SJ
#reshape to long format
plot_data <- melt(data,id.var="id")
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#id variable for position in matrix
data$id <- 1:nrow(data)
data$sj <- point_SJ
#reshape to long format
plot_data <- melt(data,id.var="sj")
#plot
ggplot(plot_data, aes(x=id,y=value,group=sj,colour=sj)) +
geom_point()+
geom_line(aes(lty=variable)) +
scale_y_log10(breaks=c(1,2,5,10,25))
#plot
ggplot(plot_data, aes(x=id,y=value,group=sj,colour=sj)) +
geom_point()+
geom_line(aes(lty=sj)) +
scale_y_log10(breaks=c(1,2,5,10,25))
#plot
ggplot(plot_data, aes(x=id,y=value,group=sj,colour=sj)) +
geom_point()+
geom_line(aes(lty=sj))
#plot
ggplot(plot_data, aes(x=id,y=value,group=sj,colour=sj)) +
geom_point()+
geom_line(aes(lty=sj))
plot_data
data <- as.data.frame(t(y))
data
#ggplot needs a dataframe
data <- as.data.frame(t(y))
#plot
# Distributional clusters by OTU
cluster_per_obs <- rep(point_SJ, rep(nrow(data), ncol(data)))
#plot
# Distributional clusters by OTU
cluster_per_obs <- rep(point_SJ, rep(nrow(data), ncol(data)))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,point_SJ)
#plot
# Distributional clusters by OTU
cluster_per_obs <- rep(point_SJ, rep(nrow(data)* ncol(data)))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,point_SJ)
cluster_per_obs
LL2
dim(LL2)
nrow(data)
ncol(data)
38*99
nrow(data)
#plot
# Distributional clusters by OTU
cluster_per_obs <- rep(point_SJ,ncol(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,point_SJ)
rep(point_SJ,ncol(data))
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",values = c(2,4,1,6,5))+ylim(0,1)+
ggtitle("CRF of microbiome subpopulations")+xlab("Taxa sorted by count")+ylab("Cumulative Relative Frequncy")
#plot
# Distributional clusters by OTU
data <- as.data.frame(y)
cluster_per_obs <- rep(point_SJ,ncol(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",values = c(2,4,1,6,5))+ylim(0,1)+
ggtitle("CRF of microbiome subpopulations")+xlab("Taxa sorted by count") + ylab("Cumulative Relative Frequncy")
LL <- apply(data,1,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5))+ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
#plot
# Distributional clusters by OTU
data <- as.data.frame(y)
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5))+ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
data
#plot
# Distributional clusters by OTU
data <- as.data.frame(y)
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,1,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
dim(LL)
LL <- apply(data,1,function(x) cumsum(sort((x),increasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
#plot
# Distributional clusters by OTU
data <- as.data.frame(y)
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,1,function(x) cumsum(sort((x),increasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
y
dim(y)
#plot
# Distributional clusters by OTU
Dietswap_dataset <- readRDS("Data-and-Results/Dietswap_dataset.RDS")
data = Dietswap_dataset[Dietswap_dataset$timepoint==1,]
data2=pivot_wider(data[,1:3],names_from = Sample,values_from = Abundance)
na_in_rows=sapply(1:dim(data2)[1],function(i) sum(data2[i,]==0))
data3=data.frame(data2[na_in_rows!=38,]) #remove all na rows
data=data3[,2:39]
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,1,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
cluster_per_obs <- rep(point_SJ,nrow(data))
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
dim(LL)
LL2 <- reshape2::melt(LL)
LL2 <- cbind(LL2,cluster_per_obs)
LL2 <- as_tibble(LL2) %>% mutate(cluster_per_obs=paste0("DC-",cluster_per_obs))
ggplot(LL2)+
geom_hline(yintercept = c(0,1),lty=3)+
geom_line(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=.5,alpha=.2)+
geom_point(aes(x=Var1,y=value,group=Var2,col=as.factor(cluster_per_obs)),
lwd=1,alpha=.9)+
theme_bw()+scale_color_manual("Distributional\nCluster",
values = c(2,4,1,6,5)) + ylim(0,1)+
ggtitle("CRF of microbiome subpopulations") +
xlab("Taxa sorted by count") +
ylab("Cumulative Relative Frequncy")
cluster_per_obs
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
LL <- apply(data,2,function(x) cumsum(sort((x),decreasing = T)) /sum((x)) )
LL <- cbind(LL,point_SJ)
LL
dim(LL)
